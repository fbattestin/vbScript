using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Management;


namespace DiskAlign2
{
    class Program
    {
        static void Main(string[] args)
        {

            //Create a new C# Console Application in Visual Studio.
            //Add “System.Management” to the project references.
            //Add a “using System.Management;” statement to the top of the Program.cs file.
            //Perform the remaining steps inside the Main method (or wherever you want it).

            //Define your query(what you want to return from WMI).
            var dskQuery = new SelectQuery("select * from win32_volume"); //where driveletter is not null");

            //Define your scope(what system you want to connect to and WMI path).
            var mgmtScope = new ManagementScope("\\\\.\\root\\cimv2");
            //Connect to WMI.
            mgmtScope.Connect();

            //Define a searcher for the query.
            var DSmgmtSrchr = new ManagementObjectSearcher(mgmtScope, dskQuery);

            Console.ForegroundColor = ConsoleColor.Green;

            float StripeSize;

            Console.WriteLine();
           // Console.WriteLine("                                                           by fb,2017");
            Console.WriteLine("---------------------------------------------------------------------");
            Console.WriteLine("██████╗ ██╗███████╗██╗  ██╗     █████╗ ██╗     ██╗ ██████╗ ███╗   ██╗");
            Console.WriteLine("██╔══██╗██║██╔════╝██║ ██╔╝    ██╔══██╗██║     ██║██╔════╝ ████╗  ██║");
            Console.WriteLine("██║  ██║██║███████╗█████╔╝     ███████║██║     ██║██║  ███╗██╔██╗ ██║");
            Console.WriteLine("██║  ██║██║╚════██║██╔═██╗     ██╔══██║██║     ██║██║   ██║██║╚██╗██║");
            Console.WriteLine("██████╔╝██║███████║██║  ██╗    ██║  ██║███████╗██║╚██████╔╝██║ ╚████║");
            Console.WriteLine("╚═════╝ ╚═╝╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══ ");
            Console.WriteLine("                                                           by fb,2017");
            // Console.WriteLine("╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗╔╗╔═╗╔╗ ");
            //Console.WriteLine(" ╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝╚╝╚═╝╚╝");
            Console.WriteLine("---------------------------------------------------------------------");
            Console.Write("Input Stripe Size in Bytes:");

            if (float.TryParse(Console.ReadLine(), out StripeSize))
            {
                Console.WriteLine("----------------------------------------------------------------------");

                //Call searcher’s Get method and loop through results.
                foreach (var diskAlign in DSmgmtSrchr.Get())
                {
                    string result = "OK";
                    float floatBlockSize, floatAlignFactor, floatCapacity, floatFreeSpace, modTest;
                    var Label = "";
                    var BlockSize = "";
                    var Capacity = "";
                    var DriveLetter = "";
                    var FreeSpace = "";

                    try { DriveLetter = diskAlign.GetPropertyValue("DriveLetter").ToString(); }
                    catch { DriveLetter = "Unassigned"; }

                    try { Label = diskAlign.GetPropertyValue("Label").ToString(); }
                    catch { Label = "Unassigned"; }

                    try { Capacity = diskAlign.GetPropertyValue("Capacity").ToString(); }
                    catch { Capacity = "Missing"; }

                    try { BlockSize = diskAlign.GetPropertyValue("BlockSize").ToString(); }
                    catch { BlockSize = "Missing"; }
                    
                    try { FreeSpace = diskAlign.GetPropertyValue("FreeSpace").ToString(); }
                    catch { FreeSpace = "Missing"; }

                    float.TryParse(BlockSize ,out floatBlockSize);
                    float.TryParse(FreeSpace, out floatFreeSpace);
                    float.TryParse(Capacity, out floatCapacity);


                    if (Capacity == "Missing" || BlockSize == "Missing" || FreeSpace == "Missing")
                    {
                        floatAlignFactor = 0;
                        modTest = 1;
                        floatCapacity = 0;
                    }
                    else
                    {
                        floatAlignFactor = StripeSize / floatBlockSize;
                        modTest = StripeSize % floatBlockSize;
                        floatCapacity = floatCapacity / 1024 / 1024;                       
                        floatFreeSpace = floatFreeSpace / 1024 / 1024;

                    }

                    Console.WriteLine();
                    Console.WriteLine("Drive Letter..............: " + DriveLetter);
                    Console.WriteLine("Label.....................: " + Label);
                    Console.WriteLine("Allocation Unit Size......: " + BlockSize);
                    Console.WriteLine("Partition Cpatity(MB).....: " + floatCapacity.ToString("0.0#"));
                    Console.WriteLine("Partition Free Space(MB)..: " + floatFreeSpace.ToString("0.0#"));
                        Console.Write("Align Factor..............: " + floatAlignFactor.ToString("0.0#") + " ");

                    if (modTest > 0)
                    {
                        result = "NOK";
                        Console.ForegroundColor = ConsoleColor.Black;
                        Console.BackgroundColor = ConsoleColor.Red;
                        Console.WriteLine("[" + result + "]");
                    }
                    else
                    {
                        result = "OK";
                        Console.ForegroundColor = ConsoleColor.Black;
                        Console.BackgroundColor = ConsoleColor.Green;
                        Console.WriteLine("[" + result + "]");
                    }
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.BackgroundColor = ConsoleColor.Black;
                }
            }
            else
            {
                //user gave an illegal input. Handle it here.
                Console.WriteLine("Wrong Data. Check with your storage vendor the correctly value!");
            }

            Console.WriteLine();
            //Console.WriteLine("╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗╔╗");
            Console.Write("Press any key to escape.");
            Console.ReadLine();
            Console.ResetColor();
        }

    }
}
